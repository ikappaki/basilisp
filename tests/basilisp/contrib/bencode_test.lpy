(ns tests.basilisp.contrib.bencode-test
  (:require
   [basilisp.contrib.bencode :as bc]
   [basilisp.test :refer [deftest are is testing]]))

(deftest bencode-encode
  (testing "bencode supported types"
    (are [v s] (= s (bc/encode v))
      42 "i42e"
      -42 "i-42e"
      0.3 "i0.3e"
      "spam" "4:spam"
      nil "0:"
      ["spam" 42] "l4:spami42ee"
      '("spam" 42) "l4:spami42ee"
      {"bar" "spam" :foo 42 :efg/xyz 128} "d3:bar4:spam7:efg/xyzi128e3:fooi42ee"
      ["spam" 42 {"bar" "spam" :foo 42}] "l4:spami42ed3:bar4:spam3:fooi42eee"))

  (testing "bencode unsupported types"
    (are [v] (thrown? python/TypeError (bc/encode v))
      #{25} :keyword-any 'symbol-any '(seq [25 26]))))

(deftest bencode-decode
  (testing "basic"
    (are [s v] (= v (bc/decode s {}))
      "i42e" [42 ""]
      "i-42e" [-42 ""]
      "4:spam" ["spam" ""]
      "0:" ["" ""]
      "l4:spami42ee" [["spam" 42] ""]
      "d3:bar4:spam3:fooi42ee" [{"bar" "spam" "foo" 42} ""]))

  (testing "keywordized"
    (are [s v] (= v (bc/decode s {:keywordize-keys true}))
      "d3:bar4:spam3:fooi42ee" [{:bar "spam" :foo 42} ""]
      "d3:bard1:xi-42eee" [{:bar {:x -42}} ""]))

  (testing "multiple"
    (is (= [42 "4:spam"] (bc/decode "i42e4:spam" {})))
    (is (= [[{"bar" "spam"} 42] ""] (bc/decode-all "d3:bar4:spamei42e")))
    (is (= [[{:bar "spam"} 42] ""] (bc/decode-all "d3:bar4:spamei42e" {:keywordize-keys true}))))

  (testing "incomplete"
    (is (= [nil "i42"] (bc/decode "i42" {})))
    (is (= [nil "d3:bar4:spam3:fooi42"] (bc/decode "d3:bar4:spam3:fooi42" {})))
    (is (= [[{"bar" "spam"} 42] "i0"] (bc/decode-all "d3:bar4:spamei42ei0")))))
